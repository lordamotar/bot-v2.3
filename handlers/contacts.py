from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

from keyboards.contacts_kb import (
    get_contact_types_keyboard,
    get_cities_keyboard,
    get_locations_keyboard
)
from keyboards.main_kb import get_main_keyboard
from database import Database


class ContactsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    contact_type = State()
    city = State()
    location = State()


router = Router()
db = Database()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    await state.set_state(ContactsStates.contact_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
        reply_markup=get_contact_types_keyboard()
    )


@router.message(ContactsStates.contact_type)
async def process_contact_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_keyboard()
        )
        return

    contact_type = message.text
    if contact_type not in ["–ú–∞–≥–∞–∑–∏–Ω", "–°–µ—Ä–≤–∏—Å"]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö"
        )
        return

    await state.update_data(contact_type=contact_type)
    cities = await db.get_all_cities()
    
    if not cities:
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç",
            reply_markup=get_contact_types_keyboard()
        )
        return

    await state.set_state(ContactsStates.city)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard(cities)
    )


@router.message(ContactsStates.city)
async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(ContactsStates.contact_type)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
            reply_markup=get_contact_types_keyboard()
        )
        return

    data = await state.get_data()
    city = message.text
    locations = await db.get_locations_by_city(city, data["contact_type"])
    
    if not locations:
        await message.answer(
            "–í –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —Ç–æ—á–µ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞",
            reply_markup=get_cities_keyboard(await db.get_all_cities())
        )
        return

    await state.update_data(city=city)
    await state.set_state(ContactsStates.location)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=get_locations_keyboard(locations)
    )


@router.message(ContactsStates.location)
async def process_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞"""
    if message.text == "–ù–∞–∑–∞–¥":
        data = await state.get_data()
        await state.set_state(ContactsStates.city)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=get_cities_keyboard(await db.get_all_cities())
        )
        return

    data = await state.get_data()
    location = message.text
    location_info = await db.get_location_info(data["city"], location)
    
    if not location_info:
        await message.answer(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=get_locations_keyboard(
                await db.get_locations_by_city(data["city"], data["contact_type"])
            )
        )
        return

    response = f"üìç {location_info['address']}\n\n"
    
    if data["contact_type"] == "–ú–∞–≥–∞–∑–∏–Ω":
        if location_info.get("phone_store"):
            response += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {location_info['phone_store']}\n"
        if location_info.get("work_schedule_weekdays"):
            response += f"üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã (–±—É–¥–Ω–∏): {location_info['work_schedule_weekdays']}\n"
        if location_info.get("work_schedule_weekend"):
            response += f"üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã (–≤—ã—Ö–æ–¥–Ω—ã–µ): {location_info['work_schedule_weekend']}\n"
    else:  # –°–µ—Ä–≤–∏—Å
        if location_info.get("phone_service"):
            response += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {location_info['phone_service']}\n"
        if location_info.get("service_schedule_weekdays"):
            response += f"üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–Ω–∏): {location_info['service_schedule_weekdays']}\n"
        if location_info.get("service_schedule_weekend"):
            response += f"üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ (–≤—ã—Ö–æ–¥–Ω—ã–µ): {location_info['service_schedule_weekend']}\n"
        if location_info.get("service_manager_name"):
            response += f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–∞: {location_info['service_manager_name']}\n"

    if location_info.get("maps_2gis_link"):
        response += f"\nüó∫ 2–ì–ò–°: {location_info['maps_2gis_link']}\n"
    if location_info.get("google_maps_link"):
        response += f"üó∫ Google Maps: {location_info['google_maps_link']}\n"

    await message.answer(
        response,
        reply_markup=get_locations_keyboard(
            await db.get_locations_by_city(data["city"], data["contact_type"])
        )
    ) 
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from keyboards.contacts_kb import get_main_menu, get_cities_keyboard, get_locations_keyboard
from data.locations import get_location_info, get_cities

router = Router()

class ContactStates(StatesGroup):
    select_city = State()
    select_location = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_menu(message: Message, state: FSMContext):
    await state.set_state(ContactStates.select_city)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard()
    )

@router.message(ContactStates.select_city, F.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu()
    )

@router.message(ContactStates.select_city)
async def select_city(message: Message, state: FSMContext):
    if message.text not in get_cities():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
        
    city = message.text
    await state.update_data(city=city)
    await state.set_state(ContactStates.select_location)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –≤ –≥–æ—Ä–æ–¥–µ {city}:",
        reply_markup=get_locations_keyboard(city)
    )

@router.message(ContactStates.select_location, F.text == "–ù–∞–∑–∞–¥")
async def back_to_cities(message: Message, state: FSMContext):
    await state.set_state(ContactStates.select_city)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard()
    )

@router.message(ContactStates.select_location)
async def show_location_info(message: Message, state: FSMContext):
    data = await state.get_data()
    city = data["city"]
    location = message.text
    
    location_info = get_location_info(city, location)
    if not location_info:
        await message.answer("–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞—Ä—Ç—ã
    map_button = InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö",
        url=location_info["map_link"]
    )
    map_keyboard = InlineKeyboardMarkup(inline_keyboard=[[map_button]])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    info_text = (
        f"üè™ {location}\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {location_info['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {location_info['phone']}\n"
        f"üîß –°–µ—Ä–≤–∏—Å: {location_info['service_phone']}\n\n"
        f"üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
        f"–ë—É–¥–Ω–∏: {location_info['workdays_hours']}\n"
        f"–í—ã—Ö–æ–¥–Ω—ã–µ: {location_info['weekend_hours']}\n\n"
        f"üõ†Ô∏è –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞:\n"
        f"–ë—É–¥–Ω–∏: {location_info['service_workdays_hours']}\n"
        f"–í—ã—Ö–æ–¥–Ω—ã–µ: {location_info['service_weekend_hours']}\n\n"
        f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–∞: {location_info['service_manager']}"
    )
    
    await message.answer(
        info_text,
        reply_markup=map_keyboard
    ) 
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from keyboards.contacts_kb import (
    get_main_menu, get_contact_type_keyboard, get_cities_keyboard,
    get_locations_keyboard
)
from database import Database
from utils.logger import logger

router = Router()
db = Database()

class ContactStates(StatesGroup):
    select_type = State()
    select_city = State()
    select_location = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_menu(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª '–ö–æ–Ω—Ç–∞–∫—Ç—ã'")
    await state.set_state(ContactStates.select_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
        reply_markup=get_contact_type_keyboard()
    )

@router.message(ContactStates.select_type, F.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu()
    )

@router.message(ContactStates.select_type)
async def select_contact_type(message: Message, state: FSMContext):
    if message.text not in ["–ú–∞–≥–∞–∑–∏–Ω", "–°–µ—Ä–≤–∏—Å"]:
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: "
            f"{message.text}"
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
        
    contact_type = message.text
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø: {contact_type}"
    )
    await state.update_data(contact_type=contact_type)
    await state.set_state(ContactStates.select_city)
    
    cities = await db.get_all_cities()
    if not cities:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.")
        return
        
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard(cities)
    )

@router.message(ContactStates.select_city, F.text == "–ù–∞–∑–∞–¥")
async def back_to_types(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞")
    await state.set_state(ContactStates.select_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
        reply_markup=get_contact_type_keyboard()
    )

@router.message(ContactStates.select_city)
async def select_city(message: Message, state: FSMContext):
    cities = await db.get_all_cities()
    if message.text not in cities:
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥: "
            f"{message.text}"
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
        
    city = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {city}")
    await state.update_data(city=city)
    
    data = await state.get_data()
    contact_type = data["contact_type"]
    locations = await db.get_locations_by_city(city, contact_type)
    
    if not locations:
        await message.answer(
            f"–í –≥–æ—Ä–æ–¥–µ {city} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {contact_type.lower()}–æ–≤."
        )
        return
        
    await state.set_state(ContactStates.select_location)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ –≥–æ—Ä–æ–¥–µ {city}:",
        reply_markup=get_locations_keyboard(locations)
    )

@router.message(ContactStates.select_location, F.text == "–ù–∞–∑–∞–¥")
async def back_to_cities(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞")
    await state.set_state(ContactStates.select_city)
    
    cities = await db.get_all_cities()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard(cities)
    )

@router.message(ContactStates.select_location)
async def show_location_info(message: Message, state: FSMContext):
    data = await state.get_data()
    city = data["city"]
    contact_type = data["contact_type"]
    address = message.text
    
    location_info = await db.get_location_info(city, address)
    if not location_info:
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å: "
            f"{address} –≤ –≥–æ—Ä–æ–¥–µ {city}"
        )
        await message.answer("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ: "
        f"{address} –≤ –≥–æ—Ä–æ–¥–µ {city}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è 2GIS
    map_buttons = []
    if location_info.get('maps_2gis_link'):
        map_buttons.append(InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –≤ 2GIS",
            url=location_info['maps_2gis_link']
        ))
    
    map_keyboard = InlineKeyboardMarkup(inline_keyboard=[map_buttons])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if contact_type == "–ú–∞–≥–∞–∑–∏–Ω":
        info_text = (
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {location_info['city']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {location_info['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {location_info['phone_store']}\n\n"
            f"üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
            f"–ë—É–¥–Ω–∏: {location_info['work_schedule_weekdays']}\n"
            f"–í—ã—Ö–æ–¥–Ω—ã–µ: {location_info['work_schedule_weekend']}"
        )
    else:  # –°–µ—Ä–≤–∏—Å
        info_text = (
            f"üîß –°–µ—Ä–≤–∏—Å\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {location_info['city']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {location_info['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {location_info['phone_service']}\n\n"
            f"üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
            f"–ë—É–¥–Ω–∏: {location_info['service_schedule_weekdays']}\n"
            f"–í—ã—Ö–æ–¥–Ω—ã–µ: {location_info['service_schedule_weekend']}\n\n"
            f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {location_info['service_manager_name']}"
        )
    
    await message.answer(
        info_text,
        reply_markup=map_keyboard
    ) 